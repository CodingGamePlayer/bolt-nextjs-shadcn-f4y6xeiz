// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum ProviderType {
  kakao
  naver
}

enum ReservationStatus {
  pending
  confirmed
  completed
  cancelled
}

enum UserRole {
  ADMIN
  USER
}

enum SubjectType {
  KOREAN    // 한방
  WESTERN   // 양방
}


model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  phone         String?
  image         String?
  role          UserRole     @default(USER)
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  
  accounts      Account[]
  sessions      Session[]
  reservations  Reservation[]

  @@map("users")
}

model Department {
  id          String    @id @default(cuid())
  name        String
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  doctors     Doctor[]
  subjects    MedicalSubject[]
  diseases    Disease[]
  reservations Reservation[]
  nonMemberReservations NonMemberReservation[]

  @@map("departments")
}

model Disease {
  id          String     @id @default(uuid())
  name        String
  description String?
  symptoms    String?
  causes      String?
  treatments  String?
  imageUrl    String?    @map("image_url")
  isActive    Boolean    @default(true) @map("is_active")
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime   @default(now()) @map("updated_at") @db.Timestamptz
  department  Department @relation(fields: [departmentId], references: [id])
  departmentId String    @map("department_id")

  @@map("Disease")
}

model Doctor {
  id           String     @id @default(uuid())
  departmentId String     @map("department_id")
  name         String
  position     String?
  specialties  String?
  imageUrl     String?    @map("image_url")
  biography    String?
  isActive     Boolean    @default(true) @map("is_active")
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime   @default(now()) @map("updated_at") @db.Timestamptz
  department   Department @relation(fields: [departmentId], references: [id])
  schedules    Schedule[]
  reservations Reservation[]
  nonMemberReservations NonMemberReservation[]
  subjects     DoctorSubject[]

  @@map("doctors")
}

model Schedule {
  id          String   @id @default(uuid())
  doctorId    String   @map("doctor_id")
  date        DateTime @db.Date
  startTime   DateTime @map("start_time") @db.Time
  endTime     DateTime @map("end_time") @db.Time
  maxPatients Int      @map("max_patients")
  isAvailable Boolean  @default(true) @map("is_available")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz
  doctor      Doctor   @relation(fields: [doctorId], references: [id])

  @@map("Schedule")
}

model Reservation {
  id              String           @id @default(uuid())
  userId          String?
  doctorId        String          @map("doctor_id")
  departmentId    String          @map("department_id")
  patientName     String          @map("patient_name")
  phone           String
  symptoms        String
  reservationDate DateTime        @map("reservation_date")
  timeSlot        String          @map("time_slot")
  status          ReservationStatus @default(pending)
  memo            String?
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  
  user            User?            @relation(fields: [userId], references: [id])
  doctor          Doctor           @relation(fields: [doctorId], references: [id])
  department      Department       @relation(fields: [departmentId], references: [id])

  @@map("reservations")
}

model NonMemberReservation {
  id                 String            @id @default(cuid())
  patientName        String
  phone              String
  reservationPassword String
  symptoms           String
  reservationDate    DateTime
  timeSlot           String
  status            ReservationStatus @default(pending)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  doctor            Doctor?          @relation(fields: [doctorId], references: [id])
  doctorId          String?
  department        Department?      @relation(fields: [departmentId], references: [id])
  departmentId      String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model MedicalSubject {
  id           String     @id @default(cuid())
  name         String     // 진료과목명
  type         SubjectType? // 한방/양방 구분 (선택)
  description  String?    // 진료과목 설명
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String
  doctors      DoctorSubject[]
  
  @@index([departmentId])
}

model HospitalInfo {
  id              String   @id @default(cuid())
  name            String   // 병원명
  representative  String   // 대표자명
  businessNumber  String   // 사업자등록번호
  address         String   // 주소
  addressDetail   String?  // 상세주소
  parkingInfo     String?  // 주차 정보
  
  // 연락처 정보
  mainPhone       String   // 대표 전화번호
  specialtyPhone  String?  // 특수 진료 전화번호 (예: 이명치료)
  
  // 진료 시간
  weekdayOpen     String   // 평일 시작 시간
  weekdayClose    String   // 평일 종료 시간
  saturdayOpen    String?  // 토요일 시작 시간
  saturdayClose   String?  // 토요일 종료 시간
  lunchStart      String   // 점심시간 시작
  lunchEnd        String   // 점심시간 종료
  closedDays      String   // 휴진일 (예: 일요일/공휴일)
  
  // 메타 정보
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("hospital_info")
}

// 의사-진료과목 다대다 관계를 위한 중간 테이블
model DoctorSubject {
  id              String        @id @default(cuid())
  doctor          Doctor        @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId        String
  subject         MedicalSubject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId       String
  createdAt       DateTime      @default(now())

  @@unique([doctorId, subjectId])
  @@map("doctor_subjects")
}

// 가격표 카테고리 테이블
model PriceCategory {
  id          String    @id @default(cuid())
  name        String    // 카테고리명 (예: 한약/처방, 치료/처치, 제증명)
  order       Int       // 정렬 순서
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // 계층 구조를 위한 필드 추가
  parentId    String?   // 상위 카테고리 ID
  parent      PriceCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children    PriceCategory[] @relation("CategoryHierarchy")
  level       Int       @default(0)  // 계층 레벨 (0: 최상위, 1: 2단계, 2: 3단계)
  
  items       PriceItem[]

  @@map("price_categories")
}

// 가격표 항목 테이블
model PriceItem {
  id            String    @id @default(cuid())
  categoryId    String    // 카테고리 ID
  name          String    // 항목명 (예: 일반 탕약, 공진단, 도수치료 등)
  description   String?   // 설명
  specification String?   // 규격/용량 (예: 15일분, 30환 등)
  priceType     String    // 가격 유형 (FIXED: 고정가격, RANGE: 가격범위, TEXT: 텍스트)
  priceMin      Int?      // 최소 가격 (원 단위)
  priceMax      Int?      // 최대 가격 (원 단위)
  priceText     String?   // 텍스트형 가격 (예: "본인부담 30%", "상담 후 결정" 등)
  order         Int       // 정렬 순서
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  category      PriceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("price_items")
}

