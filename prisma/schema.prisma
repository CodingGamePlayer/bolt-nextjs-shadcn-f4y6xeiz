generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgres"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  phone         String?
  image         String?
  role          UserRole      @default(USER)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  accounts      Account[]
  holidays      Holiday[]
  notices       Notice[]
  popupNotices  PopupNotice[]
  reservations  Reservation[]
  sessions      Session[]

  @@map("users")
}

model Department {
  id                             String                           @id @default(cuid())
  name                           String
  description                    String?
  isActive                       Boolean                          @default(true)
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime                         @updatedAt
  diseases                       Disease[]
  subjects                       MedicalSubject[]
  nonMemberReservations          NonMemberReservation[]
  department_medical_departments department_medical_departments[]
  doctors                        Doctor[]
  reservations                   Reservation[]

  @@map("departments")
}

model Disease {
  id           String     @id @default(uuid())
  name         String
  description  String?
  symptoms     String?
  causes       String?
  treatments   String?
  imageUrl     String?    @map("image_url")
  isActive     Boolean    @default(true) @map("is_active")
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime   @default(now()) @map("updated_at") @db.Timestamptz(6)
  departmentId String     @map("department_id")
  department   Department @relation(fields: [departmentId], references: [id])

  @@map("Disease")
}

model Doctor {
  id                    String                 @id @default(uuid())
  departmentId          String                 @map("department_id")
  name                  String
  position              String?
  specialties           String?
  imageUrl              String?                @map("image_url")
  biography             String?
  isActive              Boolean                @default(true) @map("is_active")
  createdAt             DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime               @default(now()) @map("updated_at") @db.Timestamptz(6)
  nonMemberReservations NonMemberReservation[]
  schedules             Schedule[]
  subjects              DoctorSubject[]
  department            Department             @relation(fields: [departmentId], references: [id])
  reservations          Reservation[]

  @@map("doctors")
}

model Schedule {
  id          String   @id @default(uuid())
  doctorId    String   @map("doctor_id")
  date        DateTime @db.Date
  startTime   DateTime @map("start_time") @db.Time(6)
  endTime     DateTime @map("end_time") @db.Time(6)
  maxPatients Int      @map("max_patients")
  isAvailable Boolean  @default(true) @map("is_available")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  doctor      Doctor   @relation(fields: [doctorId], references: [id])

  @@map("Schedule")
}

model Reservation {
  id              String            @id @default(uuid())
  userId          String?
  doctorId        String            @map("doctor_id")
  departmentId    String            @map("department_id")
  patientName     String            @map("patient_name")
  phone           String
  symptoms        String
  reservationDate DateTime          @map("reservation_date")
  timeSlot        String            @map("time_slot")
  status          ReservationStatus @default(pending)
  memo            String?
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  department      Department        @relation(fields: [departmentId], references: [id])
  doctor          Doctor            @relation(fields: [doctorId], references: [id])
  user            User?             @relation(fields: [userId], references: [id])

  @@map("reservations")
}

model NonMemberReservation {
  id                  String            @id @default(cuid())
  patientName         String
  phone               String
  reservationPassword String
  symptoms            String
  reservationDate     DateTime
  timeSlot            String
  status              ReservationStatus @default(pending)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  doctorId            String?
  departmentId        String?
  department          Department?       @relation(fields: [departmentId], references: [id])
  doctor              Doctor?           @relation(fields: [doctorId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model MedicalSubject {
  id           String          @id @default(cuid())
  name         String
  type         SubjectType?
  description  String?
  isActive     Boolean         @default(true)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  departmentId String
  department   Department      @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  doctors      DoctorSubject[]

  @@index([departmentId])
}

model HospitalInfo {
  id             String   @id @default(cuid())
  name           String
  representative String
  businessNumber String
  address        String
  addressDetail  String?
  parkingInfo    String?
  mainPhone      String
  specialtyPhone String?
  weekdayOpen    String
  weekdayClose   String
  saturdayOpen   String?
  saturdayClose  String?
  lunchStart     String
  lunchEnd       String
  closedDays     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("hospital_info")
}

model DoctorSubject {
  id        String         @id @default(cuid())
  doctorId  String
  subjectId String
  createdAt DateTime       @default(now())
  doctor    Doctor         @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  subject   MedicalSubject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([doctorId, subjectId])
  @@map("doctor_subjects")
}

model PriceCategory {
  id        String          @id @default(cuid())
  name      String
  order     Int
  isActive  Boolean         @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  level     Int             @default(0)
  parentId  String?
  parent    PriceCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children  PriceCategory[] @relation("CategoryHierarchy")
  items     PriceItem[]

  @@map("price_categories")
}

model PriceItem {
  id            String        @id @default(cuid())
  categoryId    String
  name          String
  description   String?
  specification String?
  priceType     String
  priceMin      Int?
  priceMax      Int?
  priceText     String?
  order         Int
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  category      PriceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("price_items")
}

model Notice {
  id          String             @id @default(cuid())
  title       String
  content     String
  category    NoticeCategory
  isImportant Boolean            @default(false)
  isActive    Boolean            @default(true)
  viewCount   Int                @default(0)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @updatedAt @map("updated_at")
  userId      String?
  attachments NoticeAttachment[]
  createdBy   User?              @relation(fields: [userId], references: [id])

  @@map("notices")
}

model NoticeAttachment {
  id        String   @id @default(cuid())
  noticeId  String
  fileName  String
  fileUrl   String
  fileSize  Int
  mimeType  String
  createdAt DateTime @default(now()) @map("created_at")
  notice    Notice   @relation(fields: [noticeId], references: [id], onDelete: Cascade)

  @@map("notice_attachments")
}

model PopupNotice {
  id        String         @id @default(cuid())
  title     String
  content   String
  category  NoticeCategory
  imageUrl  String?
  startDate DateTime
  endDate   DateTime
  isActive  Boolean        @default(true)
  priority  Int            @default(0)
  width     Int            @default(320)
  height    Int?
  position  Json?
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  userId    String?
  createdBy User?          @relation(fields: [userId], references: [id])

  @@map("popup_notices")
}

model Hospital {
  id             String   @id @default(cuid())
  name           String
  representative String
  businessNumber String
  address        String
  addressDetail  String?
  parkingInfo    String?
  mainPhone      String
  specialtyPhone String?
  weekdayOpen    String
  weekdayClose   String
  saturdayOpen   String?
  saturdayClose  String?
  lunchStart     String
  lunchEnd       String
  closedDays     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Holiday {
  id          String    @id @default(cuid())
  title       String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String?
  createdBy   User?     @relation(fields: [userId], references: [id])

  @@map("holidays")
}

model department_medical_departments {
  id                    String              @id
  department_id         String
  medical_department_id String
  created_at            DateTime            @default(now())
  updated_at            DateTime
  departments           Department          @relation(fields: [department_id], references: [id])
  medical_departments   medical_departments @relation(fields: [medical_department_id], references: [id])

  @@unique([department_id, medical_department_id], map: "department_medical_departments_department_id_medical_department")
  @@index([department_id], map: "idx_department_medical_departments_department_id")
  @@index([medical_department_id], map: "idx_department_medical_departments_medical_department_id")
}

model medical_departments {
  id                             String                           @id
  name                           String
  description                    String?
  created_at                     DateTime                         @default(now())
  updated_at                     DateTime
  department_medical_departments department_medical_departments[]
}

model treatment_cases {
  id                   String               @id
  title                String
  description          String
  date                 DateTime
  is_active            Boolean?             @default(true)
  order_num            Int?                 @default(0)
  created_at           DateTime?            @default(now())
  updated_at           DateTime?            @default(now())
  category_id          String
  treatment_categories treatment_categories @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model treatment_categories {
  id              String            @id
  name            String
  description     String?
  order_num       Int?              @default(0)
  is_active       Boolean?          @default(true)
  created_at      DateTime?         @default(now())
  updated_at      DateTime?         @default(now())
  treatment_cases treatment_cases[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model department_info {
  id          String    @id
  name        String
  type        String
  icon        String
  description String
  order_num   Int?      @default(0)
  is_active   Boolean?  @default(true)
  created_at  DateTime? @default(now())
  updated_at  DateTime? @default(now())
}

enum ProviderType {
  kakao
  naver
}

enum ReservationStatus {
  pending
  confirmed
  completed
  cancelled
}

enum UserRole {
  ADMIN
  USER
}

enum SubjectType {
  KOREAN
  WESTERN
}

enum NoticeCategory {
  NOTICE
  INFO
  EVENT
}
